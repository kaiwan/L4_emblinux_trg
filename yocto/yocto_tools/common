#!/bin/bash
# For my Yocto convenience scripts/tools
# common - vars, routines, ...
# We *expect* you to have sourced the oe-init-build-env and be in the Yocto build dir
# It's checked in func setup_env(); so CALL it FIRST...
# (c) kaiwanTECH

# Turn on unofficial Bash 'strict mode'! V useful
# "Convert many kinds of hidden, intermittent, or subtle bugs into immediate, glaringly obvious errors"
# ref: http://redsymbol.net/articles/unofficial-bash-strict-mode/ 
set -euo pipefail
#YOCTO_DIR="/opt"

name=$(basename $0)
export DEBUG=0
dprint()
{
[ "${DEBUG}" -eq  0 ] && return
echo "<D> $*"
}

failit()
{
	echo >&2 "FATAL:$(basename $0) :: $*"
	exit 1
}

# Params:
# $1 : [-q] : optional; if passed, run in quiet mode
setup_env()
{
set +u
[ -z "${BUILDDIR}" ] && {
  echo "${name}: we expect you to be running this script from within your Yocto workspace.
So, you need to do that - source the Yocto environment first; typically:
cd <yocto-workspace>/
source oe-init-build-env [build-dir]

Perhaps you have a fully setup Yocto workspace but are running this script from another directory;
in this case, simply switch to your Yocto workspace and run it from there, f.e., like this:
~/L4_emblinux_trg/yocto/yocto_tools/${name} [-d] meta-<layername> <recipe-name>"
  exit 1
}
[[ ! -d ${BUILDDIR} ]] && failit "The default 'yocto' build directory specified
 \"${BUILDDIR}\"
does not exist.

Pl setup your Yocto workspace first (i.e.
 cd to your Yocto workspace (cd <...>/poky)
 source oe-init-build-env [build-dir]
) and then run this tool...
"

set -u
[ ! -f conf/local.conf ] && {
  echo "${name}: we expect you to have sourced the oe-init-build-env and be in the Yocto build dir"
  exit 1
}
#export MACH=$(grep -w "^MACHINE" conf/local.conf |tail -n1|cut -d'=' -f2|cut -d'"' -f2)

# Better way - get vars from the JSON testdata file!
# How? cat tmp/deploy/images/qemuarm64/core-image-base-qemuarm64.testdata.json | jq --raw-output '.<var>'
# So first gather the vars for machine, image name..
local MACH=$(\ls -1t ${BUILDDIR}/tmp/deploy/images/ |head -n1)  # ASSUME it's the latest one (if not the only)
[[ -z "${MACH}" ]] && failit "couldn't get value of machine var"
if [[ -d ${BUILDDIR}/buildhistory ]] ; then
   local IMAGE_NAME=$(ls -1 buildhistory/images/${MACH}/glibc/)
   [[ -z "${IMAGE_NAME}" ]] && failit "couldn't get value of IMAGE_NAME var"
else
	failit "require 'buildhistory' turned on (to get reqd vars)
To do so, insert this line into your conf/local.conf:
INHERIT += \"buildhistory\""
fi

export TESTDATA_JSON=${BUILDDIR}/tmp/deploy/images/${MACH}/${IMAGE_NAME}-${MACH}.testdata.json
[[ ! -f "${TESTDATA_JSON}" ]] && failit "couldn't get the JSON testdata file"
#ls -l ${TESTDATA_JSON}

set +e
if [[ $# -ge 1 && "$1" = "-q" ]] ; then
	set -e
	return
else
  echo "[--- WRT your current Yocto workspace/build config:
BUILDDIR = ${BUILDDIR}
MACHINE  = ${MACH}
IMAGE    = ${IMAGE_NAME}
TESTDATA_JSON file = ${TESTDATA_JSON}
---]"
	set -e
fi
}

#-------------- r u n c m d -------------------------------------------
# Display and run the provided command.
# Parameter 1 : the command to run
runcmd()
{
SEP="------------------------------"
[ $# -eq 0 ] && return
echo "${SEP}
$*"
eval "$*"
}

#-------------- r u n c m d _ f a i l c h k ---------------------------
# Display and run the provided command; check for failure case
#  Parameter 1 : 0 => non-fatal, +ve => fatal exit with this error val
#  Parameter 2... : the command to run
runcmd_failchk()
{
SEP="------------------------------"
[ $# -eq 0 ] && return
local errcode=$1
shift
echo "${SEP}
$*"
eval "$*" || {
  echo -n " *WARNING* execution failure"
  if [ ${errcode} -ne 0 ] ; then
    echo " : FATAL error (${errcode}), aborting now"
    exit ${errcode}
  fi
}
}

#------ g e t _ y n _ r e p l y ---------------------------------------
# User's reply should be Y or N.
# Returns:
#  0  => user has answered 'Y'
#  1  => user has answered 'N'
get_yn_reply()
{
aecho -n "Type 'y' or 'n' please (followed by [Enter] key) : "
str="${*}"
while true
do
   aecho "${str}"
   read -r reply

   case "$reply" in
    y | yes | Y | YES )     return 0
            ;;
    n* | N* )       return 1
            ;;
    *) aecho "What? Pl type Y / N"
   esac
done
}

# QP
# QuickPrint ;-)
# Print timestamp, script name, line#. Useful for debugging.
# [RELOOK / FIXME : not really useful as it doen't work as a true macro;
#  just prints _this_ script name, line#.]
QP()
{
	_ERR_HDR_FMT="%.23s %s[%s]: "
	_ERR_MSG_FMT="${_ERR_HDR_FMT}%s\n"
	printf " QP: $_ERR_MSG_FMT" "$(date +%F.%T.%N)" " ${BASH_SOURCE[1]##*/}:${FUNCNAME[2]}" #|tee -a ${LOGFILE_COMMON}
	#dumpstack
	#printf " QP: $_ERR_MSG_FMT" $(date +%F.%T.%N) " ${BASH_SOURCE[1]##*/}:${BASH_LINENO[0]}" |tee -a ${LOGFILE_COMMON}
	unset _ERR_HDR_FMT
	unset _ERR_MSG_FMT
}

# Pickup the latest file image from the build dir
# Do NOT echo anything here as we 'return' the result via an echo
#  $1 : file type - just a part typically - to search for (eg. ext4, cpio)
# Return : pathname to the file
# CALLER's responsibility to check for NULL return
pick_latest_file()
{
local IMG=$(ls -t -1 ${YOCTO_PFX}/${BUILDDIR}/tmp/deploy/images/${MACH}/${BUILD_IMAGE}-${MACH}*${1}* 2>/dev/null |head -n1)
IMG=$(realpath "${IMG}" 2>/dev/null)
echo "${IMG}"
}

# pickup the latest rootfs ext4 file image from the build dir
pick_latest_rootfs()
{
pick_latest_file ext4
}

# pickup the latest initramfs file image from the build dir
pick_latest_initramfs()
{
pick_latest_file cpio
}
