#!/bin/bash
# yct_recipe_gen
# A very simple Yocto recipe generator script.
# (c) Kaiwan N Billimoria, kaiwanTECH
# License: dual MIT | Apache
#
#----------------------------------------------------------------------
# Example: if you run this script to create a meta layer named 'meta-myprj'
# and, within it, a 'recipe' / package called 'test1' with, typically:
#  ./yct_recipe_gen meta-myprj test1
# this is the dir structure it generates, along with the layer.conf, files
# and test1.bb recipe files generated!
#
# meta-myprj/
# ├── conf
# │   └── layer.conf
# └── recipes-myprj
#     └── test1
#         ├── files
#         └── test1.bb
# 
#----------------------------------------------------------------------
name=$(basename "$0")
PFX=$(dirname "$(which "$0")")    # dir in which the common code and tools reside
source "${PFX}"/common || {
  echo "${name}: could not source 'common', aborting..." ; exit 1
}
WARN=0

#-- Create the conf/layer.conf file
setup_conf_layer_file()
{
local conf_file=${BUILDDIR}/${LAYER}/conf/layer.conf
dprint "conf_file = ${conf_file}"
echo
echo "[+] Create layer's layer.conf file"
[ -f "${BUILDDIR}"/"${LAYER}"/conf/layer.conf ] && {
  QP
  echo " *WARNING* skipping as layer.conf file already exists:"
  ls -l "${conf_file}"
  WARN=1
  return
}

cd "${BUILDDIR}"/"${LAYER}" || exit 1
#pwd
mkdir -p conf
rm -f conf/layer.conf 2>/dev/null
touch conf/layer.conf

# TODO : tune layer prio (curr set to 10), compat
#cat <<- @EOF@ > ${conf_file}
cat <<- @EOF@ > conf/layer.conf
	# We have a conf and classes directory, add to BBPATH
	BBPATH .= ":\${LAYERDIR}"

	# We have recipes-* directories, add to BBFILES
	BBFILES += "\${LAYERDIR}/recipes-*/*/*.bb \\
		\${LAYERDIR}/recipes-*/*/*.bbappend"

	BBFILE_COLLECTIONS += "${layer_token2}"
	BBFILE_PATTERN_${layer_token2} = "^\${LAYERDIR}/"
	BBFILE_PRIORITY_${layer_token2} = "10"

	LAYER_DEPENDS_${layer_token2} = "core"
	## TIP: UPDATE with later Yocto release names!
	# ref: https://wiki.yoctoproject.org/wiki/Releases
	# FIXME :: UPDATE the release names as required!
	LAYERSERIES_COMPAT_${layer_token2} = "honister dunfell hardknott"
@EOF@
ls -l conf/layer.conf
} # end setup_conf_layer_file()

#-- Populate the meta-<lyr> / recipes-<rcp> / files  directory with reqd files
add_to_files_dir()
{
echo
echo "[+] Add required files to the meta-<lyr>/recipes-<rcp>/files directory"

local wd=800 ht=450
local RCP_FILES RCPF_ARR re

while true ; do
  RCP_FILES=$(yad --file-selection --multiple  \
       --center --width=${wd} --height=${ht} \
       --title="${name}: Select required files for 'files' dir (for ${LAYER}:${RCP_NAME})" 2>/dev/null)
  [ ! -z "${RCP_FILES}" ] && {
    #echo "Required files : ${RCP_FILES}"
    IFS='|'  # delimiter that yad inserts
    read -ra RCPF_ARR <<< "${RCP_FILES}"
       # ref: https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
    for RFIL in "${RCPF_ARR[@]}"
    do
      printf "  %40s -> %30s\n" "${RFIL}" "${RCP_FILES_DIR}"
      cp --preserve=all "${RFIL}" "${RCP_FILES_DIR}"/
    done
    unset IFS
  }
  echo -n "Add more files to recipe's 'files' dir? [y/N] "
  read -r re
  #echo "re = ${re}"
  if [ "${re}" != "y" ] && [ "${re}" != "Y" ] ; then
    break
  fi
done

ls -l "${RCP_FILES_DIR}"/
echo
} # end add_to_files_dir()

#-- Generate the meta-<lyr> / recipes-<rcp> / <rcp>.bb recipe file
gen_recipe_file()
{
echo
echo "[+] Generate the layer's recipe file"

local PV=0 PR=1
local recipe_file=${BUILDDIR}/${LAYER}/recipes-${layer_token2}/${RCP_NAME}/${RCP_NAME}_${PV}.${PR}.bb

# TODO : TEMP
#rm -f ${recipe_file}

[ -f "${recipe_file}" ] && {
  QP
  echo "
*WARNING* skipping as recipe file already exists:
"
  ls -l "${recipe_file}"
  WARN=1
  return
}

#-- Get the 'files' dir content
local fname

local tmpf=$(mktemp)
ls "${RCP_FILES_DIR}" > "${tmpf}"

# SRCURI : files copied -without the 'file://' prefix;
# required for the FILES:${PN} += ... directive below
local SRCURI_FILES="" SRCURI=""
for fname in $(cat "${tmpf}")
do
  #echo "fname : ${fname}"
  SRCURI_FILES="${SRCURI_FILES} file://${fname}"
  SRCURI="${SRCURI} ${fname}"
done
SRCURI_FILES="${SRCURI_FILES} \\"
SRCURI="${SRCURI} \\"
rm -f "${tmpf}"
#echo "
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#SRCURI_FILES : ${SRCURI_FILES}
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

local D=""
cat << @EOF@ > "${recipe_file}"
# Recipe generated by ${name}
# (c) kaiwanTECH
# $(date)
# (Note- this script generates syntax appropriate for honister 3.4 onwards, the syntax is of the form x:y not x_y !
# For lower versions, you'll have to manually change the syntax).
DESCRIPTION = ""

# Section: 'examples'; replace with appropriate section; f.e.: utils, graphics, apps, ...
SECTION = "examples"

HOMEPAGE = ""

# NOTE: 
# We could set - and comment out - LICENSE to "CLOSED" to allow you to at least start
# building - if this is not accurate with respect to the licensing of the
# software being built (it will not be in most cases) you must specify the
# correct value before using this recipe for anything other than initial
# testing/development!
#LICENSE = "CLOSED"
#LIC_FILES_CHKSUM = ""
# LICENSE set to 'Dual MIT/GPL'; change if you wish...
LICENSE = "GPL-2.0 | MIT"
LIC_FILES_CHKSUM = "\\
	file://\${COREBASE}/meta/files/common-licenses/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302 \\
	"

# Fill dependencies for this recipe;
# (Note- honister 3.4 onwards, the syntax is of the form x:y not x_y !
# f.e. = "bash dpkg python"
RDEPENDS:\${PN} = ""

# Location of files
#  Tip: append '; unpack=0 \' to not unpack the file
SRC_URI = "${SRCURI_FILES}
   "

# The FILE_\${PN} addition below is required to avoid the 'installed but not shipped in any package'
# error; it's left commented out by default
# (Note- honister 3.4 onwards, the syntax is of the form x:y not x_y !
#FILES:\${PN} += "\${base_prefix}/${SRCURI}"

IMAGE_FEATURES += ""

S = "\${WORKDIR}"
# FYI, \${S} = \${WORKDIR} = tmp/work/\${PACKAGE_ARCH}-poky-\${TARGET_OS}/\${PN}/\${PV}-\${PR}
#  \${D} = \${WORKDIR}/image
# f.e
#  poky/rpi-build/tmp/work/aarch64-poky-linux/myprj/1.0-r0/image/
#                 [               WORKDIR                 ][image]
#      [build-dir][             tmp workdir               ]
# [rootfs] is a 'partial' rootfs - one made for ONLY this recipe's rootfs
# content! The final rootfs is a union of all the recipe/pkg [rootfs]'s

do_configure () {
	# Specify any needed configure commands here
	:
}

do_compile () {
	# Specify compilation commands here
	:
}

do_install () {
	# Specify install commands here; examples below:
	# (1) create a dir /etc/init.d with:
	#  install -d -m 0755 \${D}/etc/init.d
	# (2) Tip: to generate a soft link, first cd to the dir and then create it;
	#  cd ${D}/etc/rc5.d
	#  ln -s ../init.d/myprg_install.sh S99myprg
	:
}
@EOF@
ls -l "${recipe_file}"
} # end gen_recipe_file()


### 'main'

which yad >/dev/null || {
  echo "${name}: 'yad' (yet another dialog) util missing, pl install package and retry...
(Yes, as of now at least, this script requires to be run in a GUI-only environment)"
  exit 1
}
setup_env #-q  # from the 'common' script
# By now, BUILDDIR is confirmed as okay; so lets proceed...
[[ 0 -eq 1 ]] && {
BUILDDIR=$(${PFX}/showvars2 |grep "^BUILDDIR" |awk -F'=' '{print $2}')
[[ -z "${BUILDDIR}" ]] && failit "couldn't fetch value of BUILDDIR"
IMAGE_BASENAME=$(${PFX}/showvars2 |grep "^IMAGE_BASENAME" |cut -d: -f2)
[[ -z "${IMAGE_BASENAME}" ]] && failit "couldn't fetch value of IMAGE_BASENAME"
MACHINE=$(${PFX}/showvars2 MACHINE |grep "^MACHINE" |cut -d: -f2|tail -n1)
[[ -z "${MACHINE}" ]] && failit "couldn't fetch value of MACHINE"
}

export BUILDDIR
echo "
+++ NOTE Carefully Please +++
Your current Yocto 'build' dir (\$BUILDDIR) is
\"${BUILDDIR}\"

This implies that the recipe dir tree and files will be created within this
Yocto 'build' dir displayed above.
If this is fine, press [Enter] to continue, else press ^C to abort"
read -r

# usage check
[ $# -lt 2 ] && {
  echo "Usage: ${name} [-d] meta-<layername> recipe-name"
  echo "Eg. ${name} meta-mylayer helloworld
 -d : run in 'debug' mode"
  exit 1
}
# arg processing
DEBUG=0
if [ $# -eq 3 ] && [ "$1" = "-d" ] ; then
  DEBUG=1
  LAYER=$2
  RCP_NAME=$3
else
  LAYER=$1
  RCP_NAME=$2
fi
# TODO:
# Append a $PR = 0.1 to the recipe-name
dprint "DEBUG = ${DEBUG}, LAYER = ${LAYER}, RCP_NAME = ${RCP_NAME}"

#-- Validity checks
layer_metatoken=$(echo "${LAYER}" |cut -d"-" -f1)
[ "${layer_metatoken}" != "meta" ] && {
  echo " Your meta-layername is \"${LAYER}\" ; convention dictates it should be of the form
 meta-<foo>"
  exit 1 
}
export layer_token2=$(echo "${LAYER}" |cut -d"-" -f2)
[ -z "${layer_token2}" ] && {
  echo " Your meta-layername is \"${LAYER}\" ; convention dictates it should be of the form
 meta-<foo> (<foo> part is missing!)"
  exit 1 
}
dprint "layer_token2 = ${layer_token2}"

TOP=$(pwd)
cd "${BUILDDIR}" || exit 1
echo "Base Yocto workspace <pfx/build-dir> ::
${BUILDDIR}
"

#-- Create the basic tree
RCP_FILES_DIR=${BUILDDIR}/${LAYER}/recipes-${layer_token2}/${RCP_NAME}/files
dprint "RCP_FILES_DIR = ${RCP_FILES_DIR}"
mkdir -p "${RCP_FILES_DIR}" || {
  echo "Creating recipe dir \"${RCP_FILES_DIR}\" failed, aborting..."
  exit 1
}

setup_conf_layer_file
add_to_files_dir
gen_recipe_file

echo
[ ${WARN} -ne 0 ] && echo "
*** ${name}: Note: some WARNings were generated ***
"
echo "Layer \"${LAYER}\" recipe \"${RCP_NAME}\" setup:
"
tree "${BUILDDIR}"/"${LAYER}"/recipes-"${layer_token2}"

cd "${TOP}"

echo "
${name}: Don't forget to:
 a) verify and update the recipe file(s)
 b) update your workspace conf/bblayers.conf file to include the layer that
    contains this recipe in the build
 c) update your workspace conf/local.conf file to include the recipe in the build
    (typically via a IMAGE_INSTALL:append = \" ${RCP_NAME}\"
  TIP: doing a 'bitbake-layers show-recipes | grep -w xxx' one can check if recipe
  'xxx' is actually installed
 d) rebuild the project with 'bitbake <image-name>' and test
 "
exit 0
