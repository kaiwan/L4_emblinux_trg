#!/bin/bash
# Kaiwan NB, kaiwanTECH
name=$(basename $0)

show_some_bb_vars()
{
# All vars (?) : https://docs.yoctoproject.org/current/genindex.html
# is case-sensitive

echo "--- Some common bitbake variables ---"
VARS2GET="\
		ARCH CROSS_COMPILE \
		BBFILES BUILDDIR \
		CC CFLAGS CONFFILES CORE_IMAGE_EXTRA_INSTALL \
		DISTRO DISTRO_NAME DISTROOVERRIDES \
		EXTRA_IMAGE_FEATURES EXTRA_OEMAKE EXTRA_USERS_PARAMS \
		FILES \
		IMAGE_BASENAME IMAGE_FEATURES IMAGE_FSTYPES IMAGE_ROOTFS IMAGE_ROOTFS_EXTRA_SPACE \
		 IMAGE_ROOTFS_SIZE INHIBIT_PACKAGE_DEBUG_SPLIT INHIBIT_PACKAGE_STRIP INITRAMFS_IMAGE \
		 INITSCRIPT_NAME \
		KERNEL_FEATURES KERNEL_VERSION KARCH KBRANCH KBUILD_DEFCONFIG \
		WORKDIR \
		"
	#TODO- more to fill in

for VAR in ${VARS2GET}
do
	#cat tmp/deploy/images/qemuarm64/core-image-base-qemuarm64.testdata.json | jq --raw-output '.<varname>'	
	local VAL=$(cat ${TESTDATA_JSON} | jq --raw-output ".${VAR}")
	[[ ! -z "${VAL}" && "${VAL}" != "null" ]] && echo "${VAR}:${VAL}"
done
}

usage()
{
echo "Usage: ${name} [variable-whose-value-to-display] [var2] [var3] ...
The parameters are all optional. If passed, the value of each variable is displayed (if matched).
In any case, some common bitbake variable values will be displayed"
}


#--- 'main'

[[ $# -ge 1 && "$1" = "-h" ]] && {
	usage
	exit 0
}

PFX=$(dirname "$(which "$0")")    # dir in which the common code and tools reside
source "${PFX}"/common || {
  echo "${name}: could not source 'common' script, aborting..." ; exit 1
}
setup_env #-q

hash jq || failit "Package 'jq' not installed?"
show_some_bb_vars

[[ $# -eq 0 ]] && exit 0

# Iterate over all parameters
echo
for VAR in "$@"
do
	#echo "p = ${VAR}"
	#cat tmp/deploy/images/qemuarm64/core-image-base-qemuarm64.testdata.json | jq --raw-output '.<varname>'	
	VAL=$(cat ${TESTDATA_JSON} | jq --raw-output ".${VAR}")
	[[ ! -z "${VAL}" && "${VAL}" != "null" ]] && echo "${VAR}:${VAL}"
done
exit 0



echo "--------------------------------------------------------
"

RECIPE="$1"

echo "bitbake -c listtasks ${RECIPE}"
bitbake -c listtasks ${RECIPE} 2>/dev/null

echo "
----------------------------------------------------------------------
For recipe $1: WORKDIR/temp/run.do_compile : showing varaibles therein
----------------------------------------------------------------------
"
W1=$(bitbake -e ${RECIPE} 2>/dev/null |grep -w "^WORKDIR" | awk -F'=' '{print $2}' |cut -d"\"" -f2)
[ -z "${W1}" ] && {
	echo "Couldn't get WORKDIR for recipe \"${RECIPE}\""
	exit 1
}

#cat ${WORKDIR}/temp/run.do_compile
# See all vars for this recipe
echo "--------------------------------------------------------
"
[ -f ${W1}/temp/run.do_compile ] && grep "^export" ${W1}/temp/run.do_compile |cut -d' ' -f2-

