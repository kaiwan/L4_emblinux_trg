#!/bin/bash
# yct_recipe_gen

name=$(basename $0)
source ./common || {
  echo "${name}: could not source 'common', aborting..." ; exit 1
}
WARN=0

#-- Create the conf/layer.conf file
setup_conf_layer_file()
{
local conf_file=${YOCTO_PFX}/${BUILD_DIR}/${LAYER}/conf/layer.conf

echo
echo "[+] Create layer's layer.conf file"
[ -f ${YOCTO_PFX}/${BUILD_DIR}/${LAYER}/conf/layer.conf ] && {
  QP
  echo " *WARNING* skipping as layer.conf file already exists:"
  ls -l ${conf_file}
  WARN=1
  return
}

cd ${YOCTO_PFX}/${BUILD_DIR}/${LAYER} || exit 1
#pwd
mkdir -p conf
rm -f conf/layer.conf

# TODO : tune layer prio, compat
cat <<- @EOF@ > ${conf_file}
	# We have a conf and classes directory, add to BBPATH
	BBPATH .= ":\${LAYERDIR}"

	# We have recipes-* directories, add to BBFILES
	BBFILES += "\${LAYERDIR}/recipes-*/*/*.bb \\
		\${LAYERDIR}/recipes-*/*/*.bbappend"

	BBFILE_COLLECTIONS += "${layer_token2}"
	BBFILE_PATTERN_${layer_token2} = "^\${LAYERDIR}/"
	BBFILE_PRIORITY_${layer_token2} = "10"

	LAYER_DEPENDS_${layer_token2} = "core"
	LAYERSERIES_COMPAT_${layer_token2} = "thud warrior zeus"
@EOF@
ls -l ${conf_file}
}

#-- Populate the meta-<lyr> / recipes-<rcp> / files  directory with reqd files
add_to_files_dir()
{
echo
echo "[+] Add required files to the meta-<lyr>/recipes-<rcp>/files directory"

local wd=800 ht=450
local MORE=0 RCP_FILES RCPF_ARR re

while [ true ] ; do
  RCP_FILES=$(yad --file-selection --multiple  \
       --center --width=${wd} --height=${ht} \
       --title="${name}: Select required files for 'files' dir (for ${LAYER}:${RCP_NAME})" 2>/dev/null)
  [ ! -z "${RCP_FILES}" ] && {
    #echo "Required files : ${RCP_FILES}"
    IFS='|'  # delimiter that yad inserts
    read -ra RCPF_ARR <<< "${RCP_FILES}"
       # ref: https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
    for RFIL in "${RCPF_ARR[@]}"
    do
      printf "  %40s -> %30s\n" ${RFIL} ${RCP_FILES_DIR}
      cp -a ${RFIL} ${RCP_FILES_DIR}/
    done
    unset IFS
  }
  echo -n "Add more files to recipe's 'files' dir? [y/N] "
  read re
  #echo "re = ${re}"
  [ "${re}" != "y" -a "${re}" != "Y" ] && break
done

ls -l ${RCP_FILES_DIR}/
echo
}

#-- Generate the meta-<lyr> / recipes-<rcp> / <rcp>.bb recipe file
gen_recipe_file()
{
echo
echo "[+] Generate the layer's recipe file"

local recipe_file=${YOCTO_PFX}/${BUILD_DIR}/${LAYER}/recipes-${layer_token2}/${RCP_NAME}/${RCP_NAME}.bb

# TODO : TEMP
#rm -f ${recipe_file}

[ -f ${recipe_file} ] && {
  QP
  echo " *WARNING* skipping as recipe file already exists:"
  ls -l ${recipe_file}
  WARN=1
  return
}

#-- Get the 'files' dir content
local fname

local tmpf=$(tempfile)
ls ${RCP_FILES_DIR} > ${tmpf}

local SRCURI_FILES
for fname in $(cat ${tmpf})
do
  #echo "fname : ${fname}"
  SRCURI_FILES="${SRCURI_FILES} \\
  file://${fname} \\"
done
rm -f ${tmpf}
#echo "SRCURI_FILES : ${SRCURI_FILES}"

cat << @EOF@ > ${recipe_file}
# Recipe generated by ${name}
# (c) kaiwanTECH
# $(date)
DESCRIPTION = ""

HOMEPAGE = ""

# NOTE: LICENSE is being set to "CLOSED" to allow you to at least start building - if
# this is not accurate with respect to the licensing of the software being built (it
# will not be in most cases) you must specify the correct value before using this
# recipe for anything other than initial testing/development!
LICENSE = "CLOSED"
LIC_FILES_CHKSUM = ""

# Fill dependencies for this recipe;
# f.e. = "bash dpkg python"
RDEPENDS_\${PN} = ""

# Location of files
#  Tip: append '; unpack=0 \' to not unpack the file
# IMP :: pl remove any extra '\' char at EOL (only 1 should be present)
SRC_URI = "${SRCURI_FILES} \\
   "

# The FILE_\${PN} add is required to avoid the 'installed but not shipped in any package'
# error
#FILES_\${PN} += "\${base_prefix}/opt/myprj/*"

IMAGE_FEATURES += ""

S = "\${WORKDIR}"
# Fyi, \${D} = \${WORKDIR}/image
# f.e
#  poky/rpi-build/tmp/work/aarch64-poky-linux/myprj/1.0-r0/image/
#  [                      WORKDIR                              ][image]
#      [build-dir][     tmp workdir          ][ pkgname ][rel# ][rootfs]
# [rootfs] is a 'partial' rootfs - one made for ONLY this recipe's rootfs
# content! The final rootfs is a union of all the recipe/pkg [rootfs]'s

do_configure () {
	# Specify any needed configure commands here
	:
}

do_compile () {
	# Specify compilation commands here
	:
}

do_install () {
	# Specify install commands here
	# f.e.  install -d -m 0755 \${D}/etc/init.d
	# Tip: to generate a soft link, first cd to the dir and then create it;
	# f.e.
	# cd ${D}/etc/rc5.d
	# ln -s ../init.d/myprg_install.sh S99myprg
	:
}
@EOF@
ls -l ${recipe_file}
}


### 'main'

which yad >/dev/null || {
  echo "${name}: 'yad' (yet another dialog) util missing, pl install and retry..."
  exit 1
}

echo "              +++ NOTE Carefully pl +++
The current yocto workspace settings are:

 yocto 'build' dir = \"${YOCTO_PFX}/${BUILD_DIR}\"

If this is fine, press [Enter] to continue,
else press ^C to abort, then go to the file named 'common' and
fix the value of the variables YOCTO_PFX and BUILD_DIR there,
then retry...

Now press [Enter] to continue or ^C to abort ...
"
read

[ $# -lt 2 ] && {
  echo "Usage: ${name} meta-<layername> recipe-name"
  echo "Eg. ${name} meta-mylayer helloworld"
  exit 1
}
LAYER=$1
RCP_NAME=$2

#-- Validity checks
layer_metatoken=$(echo "${LAYER}" |cut -d"-" -f1)
[ "${layer_metatoken}" != "meta" ] && {
  echo " Your meta-layername is \"${LAYER}\" ; it should be of the form
 meta-<foo>"
  exit 1 
}
export layer_token2=$(echo "${LAYER}" |cut -d"-" -f2)
[ -z "${layer_token2}" ] && {
  echo " Your meta-layername is \"${LAYER}\" ; it should be of the form
 meta-<foo> (<foo> part missing)"
  exit 1 
}

TOP=$(pwd)
[ ! -d ${YOCTO_PFX} ] && {
  echo "${name}: ERROR: the 'yocto' build area specified
 \"${YOCTO_PFX}\"
does not exist. Pl setup the yocto workspace first and then run this tool..."
  exit 1
}

cd ${YOCTO_PFX}/${BUILD_DIR} || exit 1
echo "Base Yocto workspace <pfx/build-dir> ::
${YOCTO_PFX}/${BUILD_DIR}
"

#-- Create the basic tree
RCP_FILES_DIR=${YOCTO_PFX}/${BUILD_DIR}/${LAYER}/recipes-${layer_token2}/${RCP_NAME}/files
mkdir -p ${RCP_FILES_DIR}

[ 1 -eq 1 ] && {
setup_conf_layer_file
add_to_files_dir
}
gen_recipe_file

echo
[ ${WARN} -ne 0 ] && echo "${name}: Note: some Warnings were generated"
echo "Layer \"$1\" recipe \"${RCP_NAME}\" setup:
"
tree ${YOCTO_PFX}/${BUILD_DIR}/${LAYER}/recipes-${layer_token2}

cd ${TOP}

echo "${name}: Don't forget to:
 a) update the recipe file(s)
 b) update your ${BUILD_DIR}/conf/local.conf file to include the recipe in the build
    (typically via a \"IMAGE_INSTALL_append = \" \"${RCP_NAME}\"
 c) rebuild the project and test
 "
exit 0
