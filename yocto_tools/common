#!/bin/bash
# For my Yocto convenience scripts/tools
# common - vars, routines, ...
# We *expect* you to have sourced the oe-init-build-env and be in the Yocto build dir
# It's checked in func setup_env(); so CALL it FIRST...
# (c) kaiwanTECH

export DEBUG=0
dprint()
{
[ "${DEBUG}" -eq  0 ] && return
echo "<D> $*"
}

# Params:
# $1 : [-q] : optional; if passed, run in quiet mode
setup_env()
{
[ -z "${BUILDDIR}" ] && {
  echo "${name}: you need to source the Yocto environment first; typically:
cd <yocto-workspace>
source oe-init-build-env"
  exit 1
}
[ ! -f conf/local.conf ] && {
  echo "${name}: we expect you to have sourced the oe-init-build-env and be in the Yocto build dir"
  exit 1
}
export MACH=$(grep -w "^MACHINE" conf/local.conf |tail -n1|cut -d'=' -f2|cut -d'"' -f2)

### !!! ASSUMPTION !!! ###
export IMAGE=core-image-base

[ $# -ge 1 -a "$1" = "-q" ] && return || {
  echo "${name}: current workspace/build config:
BUILDDIR = ${BUILDDIR}
MACHINE  = ${MACH}
IMAGE    = ${IMAGE}
"
}
}

#-------------- r u n c m d -------------------------------------------
# Display and run the provided command.
# Parameter 1 : the command to run
runcmd()
{
SEP="------------------------------"
[ $# -eq 0 ] && return
echo "${SEP}
$*"
eval "$*"
}

#------ g e t _ y n _ r e p l y ---------------------------------------
# User's reply should be Y or N.
# Returns:
#  0  => user has answered 'Y'
#  1  => user has answered 'N'
get_yn_reply()
{
aecho -n "Type 'y' or 'n' please (followed by [Enter] key) : "
str="${*}"
while true
do
   aecho "${str}"
   read -r reply

   case "$reply" in
    y | yes | Y | YES )     return 0
            ;;
    n* | N* )       return 1
            ;;
    *) aecho "What? Pl type Y / N"
   esac
done
}

# QP
# QuickPrint ;-)
# Print timestamp, script name, line#. Useful for debugging.
# [RELOOK / FIXME : not really useful as it doen't work as a true macro;
#  just prints _this_ script name, line#.]
QP()
{
	_ERR_HDR_FMT="%.23s %s[%s]: "
	_ERR_MSG_FMT="${_ERR_HDR_FMT}%s\n"
	printf " QP: $_ERR_MSG_FMT" "$(date +%F.%T.%N)" " ${BASH_SOURCE[1]##*/}:${FUNCNAME[2]}" #|tee -a ${LOGFILE_COMMON}
	#dumpstack
	#printf " QP: $_ERR_MSG_FMT" $(date +%F.%T.%N) " ${BASH_SOURCE[1]##*/}:${BASH_LINENO[0]}" |tee -a ${LOGFILE_COMMON}
	unset _ERR_HDR_FMT
	unset _ERR_MSG_FMT
}

# Pickup the latest file image from the build dir
# Do NOT echo anything here as we 'return' the result via an echo
#  $1 : file type - just a part typically - to search for (eg. ext4, cpio)
# Return : pathname to the file
# CALLER's responsibility to check for NULL return
pick_latest_file()
{
local IMG=$(ls -t ${YOCTO_PFX}/${BUILD_DIR}/tmp/deploy/images/${MACH}/${BUILD_IMAGE}-${MACH}*${1}* 2>/dev/null |head -n1)
IMG=$(realpath "${IMG}" 2>/dev/null)
echo "${IMG}"
}

# pickup the latest rootfs ext4 file image from the build dir
pick_latest_rootfs()
{
pick_latest_file ext4
}

# pickup the latest initramfs file image from the build dir
pick_latest_initramfs()
{
pick_latest_file cpio
}
